// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DramaClient is the client API for Drama service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DramaClient interface {
	CreateDrama(ctx context.Context, in *CreateDramaRequest, opts ...grpc.CallOption) (*CreateDramaReply, error)
	UpdateDrama(ctx context.Context, in *UpdateDramaRequest, opts ...grpc.CallOption) (*UpdateDramaReply, error)
	DeleteDrama(ctx context.Context, in *DeleteDramaRequest, opts ...grpc.CallOption) (*DeleteDramaReply, error)
	GetDrama(ctx context.Context, in *GetDramaRequest, opts ...grpc.CallOption) (*GetDramaReply, error)
	ListDrama(ctx context.Context, in *ListDramaRequest, opts ...grpc.CallOption) (*ListDramaReply, error)
}

type dramaClient struct {
	cc grpc.ClientConnInterface
}

func NewDramaClient(cc grpc.ClientConnInterface) DramaClient {
	return &dramaClient{cc}
}

func (c *dramaClient) CreateDrama(ctx context.Context, in *CreateDramaRequest, opts ...grpc.CallOption) (*CreateDramaReply, error) {
	out := new(CreateDramaReply)
	err := c.cc.Invoke(ctx, "/api.drama.v1.Drama/CreateDrama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) UpdateDrama(ctx context.Context, in *UpdateDramaRequest, opts ...grpc.CallOption) (*UpdateDramaReply, error) {
	out := new(UpdateDramaReply)
	err := c.cc.Invoke(ctx, "/api.drama.v1.Drama/UpdateDrama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) DeleteDrama(ctx context.Context, in *DeleteDramaRequest, opts ...grpc.CallOption) (*DeleteDramaReply, error) {
	out := new(DeleteDramaReply)
	err := c.cc.Invoke(ctx, "/api.drama.v1.Drama/DeleteDrama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) GetDrama(ctx context.Context, in *GetDramaRequest, opts ...grpc.CallOption) (*GetDramaReply, error) {
	out := new(GetDramaReply)
	err := c.cc.Invoke(ctx, "/api.drama.v1.Drama/GetDrama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dramaClient) ListDrama(ctx context.Context, in *ListDramaRequest, opts ...grpc.CallOption) (*ListDramaReply, error) {
	out := new(ListDramaReply)
	err := c.cc.Invoke(ctx, "/api.drama.v1.Drama/ListDrama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DramaServer is the server API for Drama service.
// All implementations must embed UnimplementedDramaServer
// for forward compatibility
type DramaServer interface {
	CreateDrama(context.Context, *CreateDramaRequest) (*CreateDramaReply, error)
	UpdateDrama(context.Context, *UpdateDramaRequest) (*UpdateDramaReply, error)
	DeleteDrama(context.Context, *DeleteDramaRequest) (*DeleteDramaReply, error)
	GetDrama(context.Context, *GetDramaRequest) (*GetDramaReply, error)
	ListDrama(context.Context, *ListDramaRequest) (*ListDramaReply, error)
	mustEmbedUnimplementedDramaServer()
}

// UnimplementedDramaServer must be embedded to have forward compatible implementations.
type UnimplementedDramaServer struct {
}

func (UnimplementedDramaServer) CreateDrama(context.Context, *CreateDramaRequest) (*CreateDramaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrama not implemented")
}
func (UnimplementedDramaServer) UpdateDrama(context.Context, *UpdateDramaRequest) (*UpdateDramaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrama not implemented")
}
func (UnimplementedDramaServer) DeleteDrama(context.Context, *DeleteDramaRequest) (*DeleteDramaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDrama not implemented")
}
func (UnimplementedDramaServer) GetDrama(context.Context, *GetDramaRequest) (*GetDramaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrama not implemented")
}
func (UnimplementedDramaServer) ListDrama(context.Context, *ListDramaRequest) (*ListDramaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrama not implemented")
}
func (UnimplementedDramaServer) mustEmbedUnimplementedDramaServer() {}

// UnsafeDramaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DramaServer will
// result in compilation errors.
type UnsafeDramaServer interface {
	mustEmbedUnimplementedDramaServer()
}

func RegisterDramaServer(s grpc.ServiceRegistrar, srv DramaServer) {
	s.RegisterService(&Drama_ServiceDesc, srv)
}

func _Drama_CreateDrama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).CreateDrama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.drama.v1.Drama/CreateDrama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).CreateDrama(ctx, req.(*CreateDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_UpdateDrama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).UpdateDrama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.drama.v1.Drama/UpdateDrama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).UpdateDrama(ctx, req.(*UpdateDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_DeleteDrama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).DeleteDrama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.drama.v1.Drama/DeleteDrama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).DeleteDrama(ctx, req.(*DeleteDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_GetDrama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).GetDrama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.drama.v1.Drama/GetDrama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).GetDrama(ctx, req.(*GetDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drama_ListDrama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DramaServer).ListDrama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.drama.v1.Drama/ListDrama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DramaServer).ListDrama(ctx, req.(*ListDramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drama_ServiceDesc is the grpc.ServiceDesc for Drama service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drama_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.drama.v1.Drama",
	HandlerType: (*DramaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDrama",
			Handler:    _Drama_CreateDrama_Handler,
		},
		{
			MethodName: "UpdateDrama",
			Handler:    _Drama_UpdateDrama_Handler,
		},
		{
			MethodName: "DeleteDrama",
			Handler:    _Drama_DeleteDrama_Handler,
		},
		{
			MethodName: "GetDrama",
			Handler:    _Drama_GetDrama_Handler,
		},
		{
			MethodName: "ListDrama",
			Handler:    _Drama_ListDrama_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/drama/v1/drama.proto",
}
