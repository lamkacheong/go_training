// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0-rc5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type DramaHTTPServer interface {
	CreateDrama(context.Context, *CreateDramaRequest) (*CreateDramaReply, error)
	DeleteDrama(context.Context, *DeleteDramaRequest) (*DeleteDramaReply, error)
	GetDrama(context.Context, *GetDramaRequest) (*GetDramaReply, error)
	ListDrama(context.Context, *ListDramaRequest) (*ListDramaReply, error)
	UpdateDrama(context.Context, *UpdateDramaRequest) (*UpdateDramaReply, error)
}

func RegisterDramaHTTPServer(s *http.Server, srv DramaHTTPServer) {
	r := s.Route("/")
	r.POST("/drama/{name}", _Drama_CreateDrama0_HTTP_Handler(srv))
	r.PUT("/drama/{name}", _Drama_UpdateDrama0_HTTP_Handler(srv))
	r.DELETE("/drama/{name}", _Drama_DeleteDrama0_HTTP_Handler(srv))
	r.GET("/drama/{name}", _Drama_GetDrama0_HTTP_Handler(srv))
	r.GET("/drama", _Drama_ListDrama0_HTTP_Handler(srv))
}

func _Drama_CreateDrama0_HTTP_Handler(srv DramaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDramaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.drama.v1.Drama/CreateDrama")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDrama(ctx, req.(*CreateDramaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDramaReply)
		return ctx.Result(200, reply)
	}
}

func _Drama_UpdateDrama0_HTTP_Handler(srv DramaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDramaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.drama.v1.Drama/UpdateDrama")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDrama(ctx, req.(*UpdateDramaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDramaReply)
		return ctx.Result(200, reply)
	}
}

func _Drama_DeleteDrama0_HTTP_Handler(srv DramaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDramaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.drama.v1.Drama/DeleteDrama")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDrama(ctx, req.(*DeleteDramaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDramaReply)
		return ctx.Result(200, reply)
	}
}

func _Drama_GetDrama0_HTTP_Handler(srv DramaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDramaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.drama.v1.Drama/GetDrama")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDrama(ctx, req.(*GetDramaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDramaReply)
		return ctx.Result(200, reply)
	}
}

func _Drama_ListDrama0_HTTP_Handler(srv DramaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDramaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.drama.v1.Drama/ListDrama")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDrama(ctx, req.(*ListDramaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDramaReply)
		return ctx.Result(200, reply)
	}
}

type DramaHTTPClient interface {
	CreateDrama(ctx context.Context, req *CreateDramaRequest, opts ...http.CallOption) (rsp *CreateDramaReply, err error)
	DeleteDrama(ctx context.Context, req *DeleteDramaRequest, opts ...http.CallOption) (rsp *DeleteDramaReply, err error)
	GetDrama(ctx context.Context, req *GetDramaRequest, opts ...http.CallOption) (rsp *GetDramaReply, err error)
	ListDrama(ctx context.Context, req *ListDramaRequest, opts ...http.CallOption) (rsp *ListDramaReply, err error)
	UpdateDrama(ctx context.Context, req *UpdateDramaRequest, opts ...http.CallOption) (rsp *UpdateDramaReply, err error)
}

type DramaHTTPClientImpl struct {
	cc *http.Client
}

func NewDramaHTTPClient(client *http.Client) DramaHTTPClient {
	return &DramaHTTPClientImpl{client}
}

func (c *DramaHTTPClientImpl) CreateDrama(ctx context.Context, in *CreateDramaRequest, opts ...http.CallOption) (*CreateDramaReply, error) {
	var out CreateDramaReply
	pattern := "/drama/{name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.drama.v1.Drama/CreateDrama"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DramaHTTPClientImpl) DeleteDrama(ctx context.Context, in *DeleteDramaRequest, opts ...http.CallOption) (*DeleteDramaReply, error) {
	var out DeleteDramaReply
	pattern := "/drama/{name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.drama.v1.Drama/DeleteDrama"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DramaHTTPClientImpl) GetDrama(ctx context.Context, in *GetDramaRequest, opts ...http.CallOption) (*GetDramaReply, error) {
	var out GetDramaReply
	pattern := "/drama/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.drama.v1.Drama/GetDrama"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DramaHTTPClientImpl) ListDrama(ctx context.Context, in *ListDramaRequest, opts ...http.CallOption) (*ListDramaReply, error) {
	var out ListDramaReply
	pattern := "/drama"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.drama.v1.Drama/ListDrama"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DramaHTTPClientImpl) UpdateDrama(ctx context.Context, in *UpdateDramaRequest, opts ...http.CallOption) (*UpdateDramaReply, error) {
	var out UpdateDramaReply
	pattern := "/drama/{name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.drama.v1.Drama/UpdateDrama"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
